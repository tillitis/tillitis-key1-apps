OBJCOPY ?= llvm-objcopy

CC = clang

INCLUDE=include

# If you want libcommon's puts() et cetera to output something on our
# QEMU debug port, remove -DNODEBUG below
CFLAGS = -target riscv32-unknown-none-elf -march=rv32iczmmul -mabi=ilp32 -mcmodel=medany \
   -static -std=gnu99 -O2 -ffast-math -fno-common -fno-builtin-printf \
   -fno-builtin-putchar -nostdlib -mno-relax -Wall -flto -I $(INCLUDE) -I . -DNODEBUG

AS = clang
ASFLAGS = -target riscv32-unknown-none-elf -march=rv32iczmmul -mabi=ilp32 -mcmodel=medany -mno-relax

LDFLAGS=-T app.lds -L libcommon/ -lcommon -L libcrt0/ -lcrt0

RM=/bin/rm


.PHONY: all
all: signerapp/app.bin timer/timer.bin random/random.bin rng_stream/rng_stream.bin blink/blink.bin

# C runtime library
libcrt0/libcrt0.a: libcrt0/crt0.o
	llvm-ar -qc $@ libcrt0/crt0.o

# Common C functions
LIBOBJS=libcommon/lib.o libcommon/proto.o
libcommon/libcommon.a: $(LIBOBJS)
	llvm-ar -qc $@ libcommon/lib.o libcommon/proto.o
$(LIBOBJS): include/types.h include/tk1_mem.h include/lib.h include/proto.h

# Monocypher
MONOOBJS=monocypher/monocypher.o monocypher/monocypher-ed25519.o
monocypher/libmonocypher.a: $(MONOOBJS)
	llvm-ar -qc $@ $(MONOOBJS)
$MONOOBJS: monocypher/monocypher-ed25519.h monocypher/monocypher.h

LIBS=libcrt0/libcrt0.a libcommon/libcommon.a

# Turn elf into bin for device
%.bin: %.elf
	$(OBJCOPY) --input-target=elf32-littleriscv --output-target=binary $^ $@

# Simple ed25519 signer app
SIGNEROBJS=signerapp/app_proto.o \
    signerapp/main.o
signerapp/app.elf: $(LIBS) monocypher/libmonocypher.a $(SIGNEROBJS) app.lds
	$(CC) $(CFLAGS) $(SIGNEROBJS) $(LDFLAGS) -L monocypher -lmonocypher -I monocypher -o $@

$(SIGNEROBJS): $(INCLUDE)/tk1_mem.h signerapp/app_proto.h

# A simpler timer app
TIMEROBJS = timer/main.o timer/app_proto.o
timer/timer.elf: $(LIBS) $(TIMEROBJS) app.lds
	$(CC) $(CFLAGS) $(TIMEROBJS) $(LDFLAGS) -o $@
$(TIMEROBJS): $(INCLUDE)/tk1_mem.h timer/app_proto.h

# Random number generator app
RANDOMOBJS=random/main.o random/app_proto.o
random/random.elf: $(LIBS) $(RANDOMOBJS) app.lds
	$(CC) $(CFLAGS) $(RANDOMOBJS) $(LDFLAGS) -o $@
$(RANDOMOBJS): $(INCLUDE)/tk1_mem.h random/app_proto.h

# Streaming RNG random number app
RNG_STREAM_OBJS=rng_stream/main.o blake2s/blake2s.o
rng_stream/rng_stream.elf: $(LIBS) $(RNG_STREAM_OBJS) app.lds
	$(CC) $(CFLAGS) $(RNG_STREAM_OBJS) $(LDFLAGS) -o $@
$(RNG_STREAM_OBJS): $(INCLUDE)/tk1_mem.h

# Blinkenlights assembler app
blink/blink.elf: blink/blink.o
	ld.lld -o blink/blink.elf blink/blink.o --oformat elf

.PHONY: clean
clean:
	$(RM) -f signerapp/app.bin signerapp/app.elf $(SIGNEROBJS)
	$(RM) -f timer/timer.bin timer/timer.elf $(TIMEROBJS)
	$(RM) -f random/random.bin random/random.elf $(RANDOMOBJS)
	$(RM) -f rng_stream/rng_stream.bin rng_stream/rng_stream.elf $(RNG_STREAM_OBJS)
	$(RM) -f $(LIBS) $(LIBOBJS) libcrt0/crt0.o
	$(RM) -f monocypher/libmonocypher.a $(MONOOBJS)
	$(RM) -f blink/blink.bin blink/blink.elf blink/blink.o

FMTFILES=include/*.h libcommon/*.c signerapp/*.[ch] timer/*.[ch] random/*.[ch] rng_stream/*.[ch]
.PHONY: fmt
fmt:
	# Uses ../.clang-format
	clang-format --dry-run --ferror-limit=0 $(FMTFILES)
	clang-format --verbose -i $(FMTFILES)

.PHONY: update-mem-include
update-mem-include:
	cp -af ../../tillitis-key1/hw/application_fpga/fw/tk1_mem.h include/tk1_mem.h
